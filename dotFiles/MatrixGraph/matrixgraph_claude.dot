digraph MatrixGraphs {
    node [shape=box];

    // Main method
    main [label="main()"];
    main -> create_graph;
    create_graph -> add_edges;
    add_edges -> print_graph;
    print_graph -> print_dfs;
    print_dfs -> print_bfs;

    // AdjacencyMatrixGraph constructor
    constructor [label="AdjacencyMatrixGraph()"];
    constructor -> set_vertices;
    set_vertices -> set_edges;
    set_edges -> init_matrix;

    // addEdge method
    addEdge [label="addEdge()"];
    addEdge -> check_vertices;
    check_vertices -> check_edge_exists [label="vertices exist"];
    check_edge_exists -> update_matrix [label="edge doesn't exist"];
    update_matrix -> increment_edge_count;
    check_vertices -> return_false [label="vertices don't exist"];
    check_edge_exists -> return_false [label="edge exists"];

    // removeEdge method
    removeEdge [label="removeEdge()"];
    removeEdge -> check_vertices_remove;
    check_vertices_remove -> check_edge_exists_remove [label="vertices exist"];
    check_edge_exists_remove -> update_matrix_remove [label="edge exists"];
    update_matrix_remove -> decrement_edge_count;
    check_vertices_remove -> return_false_remove [label="vertices don't exist"];
    check_edge_exists_remove -> return_false_remove [label="edge doesn't exist"];

    // depthFirstOrder method
    depthFirstOrder [label="depthFirstOrder()"];
    depthFirstOrder -> check_start_vertex;
    check_start_vertex -> init_visited [label="valid"];
    init_visited -> init_order_list;
    init_order_list -> call_dfs_helper;
    check_start_vertex -> return_empty_list [label="invalid"];

    // depthFirstOrder helper method
    dfs_helper [label="depthFirstOrder() helper"];
    dfs_helper -> check_visited;
    check_visited -> mark_visited [label="not visited"];
    mark_visited -> add_to_order_list;
    add_to_order_list -> explore_adjacent;
    explore_adjacent -> dfs_helper [label="recursive call"];
    check_visited -> return_dfs [label="visited"];

    // breadthFirstOrder method
    breadthFirstOrder [label="breadthFirstOrder()"];
    breadthFirstOrder -> check_start_vertex_bfs;
    check_start_vertex_bfs -> init_visited_bfs [label="valid"];
    init_visited_bfs -> init_order_list_bfs;
    init_order_list_bfs -> init_queue;
    init_queue -> bfs_loop;
    bfs_loop -> dequeue;
    dequeue -> check_visited_bfs;
    check_visited_bfs -> mark_visited_bfs [label="not visited"];
    mark_visited_bfs -> add_to_order_list_bfs;
    add_to_order_list_bfs -> explore_adjacent_bfs;
    explore_adjacent_bfs -> enqueue [label="edge exists"];
    enqueue -> bfs_loop [label="more vertices"];
    bfs_loop -> return_bfs [label="queue empty"];
    check_start_vertex_bfs -> return_empty_list_bfs [label="invalid"];
}