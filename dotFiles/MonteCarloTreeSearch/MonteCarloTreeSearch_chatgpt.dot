digraph CFG {
    // Main method
    1 [label="main: MonteCarloTreeSearch mcts = new MonteCarloTreeSearch();"];
    2 [label="main: mcts.monteCarloTreeSearch(mcts.new Node(null, true));"];
    1 -> 2;

    // monteCarloTreeSearch method
    3 [label="monteCarloTreeSearch: addChildNodes(rootNode, 10);"];
    4 [label="monteCarloTreeSearch: timeLimit = System.currentTimeMillis() + TIME_LIMIT;"];
    5 [label="while (System.currentTimeMillis() < timeLimit)"];
    6 [label="getPromisingNode(rootNode);"];
    7 [label="if (promisingNode.childNodes.size() == 0)"];
    8 [label="addChildNodes(promisingNode, 10);"];
    9 [label="simulateRandomPlay(promisingNode);"];
    10 [label="winnerNode = getWinnerNode(rootNode);"];
    11 [label="printScores(rootNode);"];
    12 [label="System.out.format(...);"];
    3 -> 4 -> 5;
    5 -> 6 [label="True"];
    6 -> 7 -> 8 [label="True"];
    7 -> 9 [label="False"];
    8 -> 9;
    9 -> 5;
    5 -> 10 [label="False"];
    10 -> 11 -> 12;

    // addChildNodes method
    13 [label="for (int i = 0; i < childCount; i++)"];
    14 [label="node.childNodes.add(new Node(node, !node.isPlayersTurn));"];
    13 -> 14 [label="Loop"];
    14 -> 13 [label="Increment"];
    13 -> 14 [label="Exit"];

    // getPromisingNode method
    15 [label="while (promisingNode.childNodes.size() != 0)"];
    16 [label="for (int i = 0; i < promisingNode.childNodes.size(); i++)"];
    17 [label="if (childNode.visitCount == 0)"];
    18 [label="uctTemp calculation"];
    19 [label="promisingNode = promisingNode.childNodes.get(nodeIndex);"];
    15 -> 16;
    16 -> 17 -> 19 [label="True"];
    17 -> 18 [label="False"];
    18 -> 19;
    19 -> 15;

    // simulateRandomPlay method
    20 [label="promisingNode.playerWon = (rand.nextInt(6) == 0);"];
    21 [label="while (tempNode != null)"];
    22 [label="tempNode.visitCount++;"];
    23 [label="if (tempNode.isPlayersTurn && isPlayerWinner || ..."];
    24 [label="tempNode.score += WIN_SCORE;"];
    25 [label="tempNode = tempNode.parent;"];
    21 -> 22 -> 23 -> 24 -> 25 -> 21 [label="Loop"];
    23 -> 25 [label="False"];

    // getWinnerNode method
    26 [label="return Collections.max(rootNode.childNodes, ..."];
    26 -> 10;

    // printScores method
    27 [label="for (int i = 0; i < rootNode.childNodes.size(); i++)"];
    28 [label="System.out.printf(...)"];
    27 -> 28 -> 27 [label="Loop"];
    27 -> 28 [label="Exit"];
}