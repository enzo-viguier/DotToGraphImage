digraph CFG {
    node [shape=box];
    
    // Main entry point
    start [label="Start"];
    end [label="End"];

    // findHamiltonianCycle function
    FHC_entry [label="findHamiltonianCycle(int[][] graph)"];
    init_vertex [label="this.vertex = graph.length"];
    init_cycle [label="this.cycle = new int[this.vertex + 1]"];
    init_pathCount [label="this.pathCount = 1"];
    init_graph [label="this.graph = graph"];
    init_cycle_0 [label="this.cycle[0] = 0"];
    init_cycle_neg1 [label="for (i = 0; i < this.cycle.length; i++) this.cycle[i] = -1"];
    check_isPathFound [label="isPathFound(0)"];
    cycle_reset [label="if (!isPathFound(0)) for (i = 0; i < this.cycle.length; i++) this.cycle[i] = -1"];
    set_cycle_end [label="this.cycle[this.cycle.length - 1] = this.cycle[0]"];
    return_cycle [label="return cycle"];

    // isPathFound function
    IPF_entry [label="isPathFound(int vertex)"];
    check_last_vertex [label="if (this.graph[vertex][0] == 1 && this.pathCount == this.vertex)"];
    return_true [label="return true"];
    check_pathCount [label="if (this.pathCount == this.vertex)"];
    return_false [label="return false"];
    for_loop_v [label="for (int v = 0; v < this.vertex; v++)"];
    check_graph_connection [label="if (this.graph[vertex][v] == 1)"];
    add_to_cycle [label="this.cycle[this.pathCount++] = v"];
    remove_connection [label="this.graph[vertex][v] = 0, this.graph[v][vertex] = 0"];
    call_isPresent [label="if (!isPresent(v))"];
    recursive_call [label="return isPathFound(v)"];
    restore_connection [label="this.graph[vertex][v] = 1, this.graph[v][vertex] = 1"];
    remove_from_cycle [label="this.cycle[--this.pathCount] = -1"];

    // isPresent function
    IP_entry [label="isPresent(int vertex)"];
    for_loop_i [label="for (int i = 0; i < pathCount - 1; i++)"];
    check_cycle [label="if (cycle[i] == vertex)"];
    return_true_isPresent [label="return true"];
    return_false_isPresent [label="return false"];

    // Control Flow Edges
    start -> FHC_entry;
    FHC_entry -> init_vertex;
    init_vertex -> init_cycle;
    init_cycle -> init_cycle_neg1;
    init_cycle_neg1 -> init_graph;
    init_graph -> init_cycle_0;
    init_cycle_0 -> init_pathCount;
    init_pathCount -> check_isPathFound;

    check_isPathFound -> cycle_reset [label="false"];
    check_isPathFound -> set_cycle_end [label="true"];

    cycle_reset -> return_cycle;
    set_cycle_end -> return_cycle;
    return_cycle -> end;

    // isPathFound function flow
    check_isPathFound -> IPF_entry;
    IPF_entry -> check_last_vertex;
    check_last_vertex -> return_true [label="true"];
    check_last_vertex -> check_pathCount [label="false"];
    
    check_pathCount -> return_false [label="true"];
    check_pathCount -> for_loop_v [label="false"];

    for_loop_v -> check_graph_connection;
    check_graph_connection -> add_to_cycle [label="true"];
    check_graph_connection -> for_loop_v [label="false"];
    add_to_cycle -> remove_connection;
    remove_connection -> call_isPresent;
    call_isPresent -> recursive_call [label="false"];
    call_isPresent -> restore_connection [label="true"];
    restore_connection -> remove_from_cycle;
    remove_from_cycle -> for_loop_v;

    // isPresent function flow
    call_isPresent -> IP_entry;
    IP_entry -> for_loop_i;
    for_loop_i -> check_cycle;
    check_cycle -> return_true_isPresent [label="true"];
    check_cycle -> for_loop_i [label="false"];
    for_loop_i -> return_false_isPresent;
    return_true_isPresent -> call_isPresent;
    return_false_isPresent -> call_isPresent;
}