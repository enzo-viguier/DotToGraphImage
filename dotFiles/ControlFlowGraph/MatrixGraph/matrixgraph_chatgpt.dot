digraph ControlFlowGraph {
    node [shape=box];
    // Main method nodes
    Main [label="MatrixGraphs.main(String[] args)"];
    AddEdge_1 [label="graph.addEdge(1, 2)"];
    AddEdge_2 [label="graph.addEdge(1, 5)"];
    AddEdge_3 [label="graph.addEdge(2, 5)"];
    AddEdge_4 [label="graph.addEdge(1, 2)"];
    AddEdge_5 [label="graph.addEdge(2, 3)"];
    AddEdge_6 [label="graph.addEdge(3, 4)"];
    AddEdge_7 [label="graph.addEdge(4, 1)"];
    AddEdge_8 [label="graph.addEdge(2, 3)"];
    AddEdge_9 [label="graph.addEdge(3, 9)"];
    AddEdge_10 [label="graph.addEdge(9, 1)"];
    AddEdge_11 [label="graph.addEdge(9, 8)"];
    AddEdge_12 [label="graph.addEdge(1, 8)"];
    AddEdge_13 [label="graph.addEdge(5, 6)"];
    Print_1 [label="System.out.println('The graph matrix:')"];
    PrintGraph [label="System.out.println(graph)"];
    Print_2 [label="System.out.println('Depth first order beginning at node 1:')"];
    PrintDF [label="System.out.println(graph.depthFirstOrder(1))"];
    Print_3 [label="System.out.println('Breadth first order beginning at node 1:')"];
    PrintBF [label="System.out.println(graph.breadthFirstOrder(1))"];
    
    // Edge connections for main method
    Main -> AddEdge_1;
    AddEdge_1 -> AddEdge_2;
    AddEdge_2 -> AddEdge_3;
    AddEdge_3 -> AddEdge_4;
    AddEdge_4 -> AddEdge_5;
    AddEdge_5 -> AddEdge_6;
    AddEdge_6 -> AddEdge_7;
    AddEdge_7 -> AddEdge_8;
    AddEdge_8 -> AddEdge_9;
    AddEdge_9 -> AddEdge_10;
    AddEdge_10 -> AddEdge_11;
    AddEdge_11 -> AddEdge_12;
    AddEdge_12 -> AddEdge_13;
    AddEdge_13 -> Print_1;
    Print_1 -> PrintGraph;
    PrintGraph -> Print_2;
    Print_2 -> PrintDF;
    PrintDF -> Print_3;
    Print_3 -> PrintBF;

    // Depth First Order (DFS)
    DFS_1 [label="depthFirstOrder(int startVertex)"];
    DFS_Check [label="startVertex validity check"];
    DFS_Visit [label="depthFirstOrder recursive visit"];
    DFS_Return [label="Return DFS result"];

    // Breadth First Order (BFS)
    BFS_1 [label="breadthFirstOrder(int startVertex)"];
    BFS_Check [label="startVertex validity check"];
    BFS_Visit [label="breadthFirstOrder visit queue"];
    BFS_Return [label="Return BFS result"];

    // DFS edges
    PrintDF -> DFS_1;
    DFS_1 -> DFS_Check;
    DFS_Check -> DFS_Visit [label="valid startVertex"];
    DFS_Visit -> DFS_Return;

    // BFS edges
    PrintBF -> BFS_1;
    BFS_1 -> BFS_Check;
    BFS_Check -> BFS_Visit [label="valid startVertex"];
    BFS_Visit -> BFS_Return;
}