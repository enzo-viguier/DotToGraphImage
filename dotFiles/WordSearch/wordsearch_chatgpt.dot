digraph WordSearchCFG {
    node [shape=box];

    // Entry point
    start [label="Start"];

    // Methods
    isValid [label="isValid(int x, int y)"];
    doDFS_entry [label="doDFS(int x, int y, int nextIdx)"];
    exist_entry [label="exist(char[][] board, String word)"];

    // `isValid` method flow
    isValid_cond [label="if (x >= 0 && x < board.length && y >= 0 && y < board[0].length)"];
    isValid_return_true [label="return true"];
    isValid_return_false [label="return false"];

    // `doDFS` method flow
    doDFS_set_visited [label="visited[x][y] = true"];
    doDFS_check_nextIdx [label="if (nextIdx == word.length())"];
    doDFS_return_true [label="return true"];
    doDFS_loop [label="for (int i = 0; i < 4; ++i)"];
    doDFS_calc_xi [label="xi = x + dx[i]"];
    doDFS_calc_yi [label="yi = y + dy[i]"];
    doDFS_check_conditions [label="if (isValid(xi, yi) && board[xi][yi] == word.charAt(nextIdx) && !visited[xi][yi])"];
    doDFS_recursive [label="boolean exists = doDFS(xi, yi, nextIdx + 1)"];
    doDFS_check_exists [label="if (exists)"];
    doDFS_unset_visited [label="visited[x][y] = false"];
    doDFS_return_false [label="return false"];

    // `exist` method flow
    exist_init_board [label="this.board = board"];
    exist_init_word [label="this.word = word"];
    exist_outer_loop [label="for (int i = 0; i < board.length; ++i)"];
    exist_inner_loop [label="for (int j = 0; j < board[0].length; ++j)"];
    exist_check_first_char [label="if (board[i][j] == word.charAt(0))"];
    exist_init_visited [label="visited = new boolean[board.length][board[0].length]"];
    exist_call_doDFS [label="boolean exists = doDFS(i, j, 1)"];
    exist_check_exists [label="if (exists)"];
    exist_return_true [label="return true"];
    exist_return_false [label="return false"];

    // Connections
    start -> exist_entry;

    exist_entry -> exist_init_board;
    exist_init_board -> exist_init_word;
    exist_init_word -> exist_outer_loop;

    exist_outer_loop -> exist_inner_loop [label="true"];
    exist_inner_loop -> exist_check_first_char [label="true"];
    exist_check_first_char -> exist_init_visited [label="true"];
    exist_check_first_char -> exist_inner_loop [label="false"];
    exist_init_visited -> exist_call_doDFS;
    exist_call_doDFS -> exist_check_exists;
    exist_check_exists -> exist_return_true [label="true"];
    exist_check_exists -> exist_inner_loop [label="false"];
    exist_inner_loop -> exist_outer_loop [label="loop"];
    exist_outer_loop -> exist_return_false [label="end"];

    exist_call_doDFS -> doDFS_entry;
    
    // doDFS flow
    doDFS_entry -> doDFS_set_visited;
    doDFS_set_visited -> doDFS_check_nextIdx;
    doDFS_check_nextIdx -> doDFS_return_true [label="true"];
    doDFS_check_nextIdx -> doDFS_loop [label="false"];
    doDFS_loop -> doDFS_calc_xi;
    doDFS_calc_xi -> doDFS_calc_yi;
    doDFS_calc_yi -> doDFS_check_conditions;
    doDFS_check_conditions -> doDFS_recursive [label="true"];
    doDFS_check_conditions -> doDFS_loop [label="false"];
    doDFS_recursive -> doDFS_check_exists;
    doDFS_check_exists -> doDFS_return_true [label="true"];
    doDFS_check_exists -> doDFS_loop [label="false"];
    doDFS_loop -> doDFS_unset_visited [label="exit"];
    doDFS_unset_visited -> doDFS_return_false;

    // isValid flow
    doDFS_check_conditions -> isValid [label="call"];
    isValid -> isValid_cond;
    isValid_cond -> isValid_return_true [label="true"];
    isValid_cond -> isValid_return_false [label="false"];
    isValid_return_true -> doDFS_check_conditions;
    isValid_return_false -> doDFS_loop;

    // End
    exist_return_true -> end;
    exist_return_false -> end;
}